#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Credenciales WiFi
const char* ssid = "*******";
const char* password = "*******";

// Valores iniciales para los componentes de color
int r = 0;
int g = 0;
int b = 0;

// Servidor web
ESP8266WebServer server(80);

void setup() {
  Serial.begin(1200);

  // Restringir los valores de color al rango de 0 a 255
  r = constrain(r, 0, 255);
  g = constrain(g, 0, 255);
  b = constrain(b, 0, 255);

  // Conexión a la red WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("Conexión WiFi establecida");
  Serial.println("Dirección IP: " + WiFi.localIP().toString());

  // Manejar los endpoints /color y /change
  server.on("/", HTTP_GET, handlePage);
  server.on("/ping", HTTP_GET, handleRoot);
  server.on("/color", HTTP_GET, handleColor);
  server.on("/change", HTTP_POST, handleChange);
  server.begin();
  Serial.println("Servidor web iniciado");
}

void loop() {
  server.handleClient();
}

void handleColor() {
  // Obtener los valores de R, G y B de la URL
  int r = server.arg("r").toInt();
  int g = server.arg("g").toInt();
  int b = server.arg("b").toInt();

  // Si no se recibe un valor, establecer valores por defecto
  if (r == 0) {
    r = 255;  // Valor por defecto para R
  }
  if (g == 0) {
    g = 0;  // Valor por defecto para G
  }
  if (b == 0) {
    b = 0;  // Valor por defecto para B
  }

  // Validar valores (0-255)
  if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {
    String errorMessage = "{\"code\": 400, \"mensaje\": \"Solicitud incorrecta: Valores de color inválidos.\"}";
    server.send(400, "application/json", errorMessage);
    return;
  }

  // Imprimir valores en el monitor serial
  Serial.print("R: ");
  Serial.print(r);
  Serial.print(", G: ");
  Serial.print(g);
  Serial.print(", B: ");
  Serial.println(b);

  // Crear objeto JSON
  String json = "{";
  json += "\"r\": " + String(r) + ",";
  json += "\"g\": " + String(g) + ",";
  json += "\"b\": " + String(b);
  json += "}";

  // Enviar respuesta JSON al cliente
  server.send(200, "application/json", json);
}

void handleChange() {
  // Obtener los valores de R, G y B del cuerpo de la solicitud
  String requestBody = server.arg("plain");
  int r = 0, g = 0, b = 0;
  if (requestBody.length() > 0) {
    sscanf(requestBody.c_str(), "r=%d&g=%d&b=%d", &r, &g, &b);
  }

  // Si no se recibe un valor, establecer valores por defecto
  if (r == 0) {
    r = 255;  // Valor por defecto para R
  }
  if (g == 0) {
    g = 0;  // Valor por defecto para G
  }
  if (b == 0) {
    b = 0;  // Valor por defecto para B
  }

  // Validar valores (0-255)
  if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {
    String errorMessage = "{\"code\": 400, \"mensaje\": \"Solicitud incorrecta: Valores de color inválidos.\"}";
    server.send(400, "application/json", errorMessage);
    return;
  }

  // Imprimir valores en el monitor serial
  Serial.print("R: ");
  Serial.print(r);
  Serial.print(", G: ");
  Serial.print(g);
  Serial.print(", B: ");
  Serial.println(b);

  // Crear objeto JSON
  String json = "{";
  json += "\"r\": " + String(r) + ",";
  json += "\"g\": " + String(g) + ",";
  json += "\"b\": " + String(b);
  json += "}";

  // Enviar respuesta JSON al cliente
  server.send(200, "application/json", json);
}

void handleRoot() {
  String pingResponse = "{\"code\": 200, \"mensaje\": \"OK\"}";
  server.send(200, "application/json", pingResponse);
}

void handlePage() {
  String page = "<!DOCTYPE html>";
  page += "<html lang=\"es\">";
  page += "<head>";
  page += "<meta charset=\"UTF-8\">";
  page += "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">";
  page += "<title>Control de LED RGB</title>";
  page += "<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">";
  page += "<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>";
  page += "<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\"></script>";
  page += "<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>";
  page += "</head>";
  page += "<body>";
  page += "<div class=\"container\">";
  page += "<h1 class=\"mt-5\">Control de LED RGB</h1>";
  page += "<div class=\"row\">";
  page += "<div class=\"col\">";
  page += "<input type=\"range\" class=\"form-control-range\" id=\"redSlider\" min=\"0\" max=\"255\" onchange=\"updateColor()\">";
  page += "</div>";
  page += "<div class=\"col\">";
  page += "<input type=\"range\" class=\"form-control-range\" id=\"greenSlider\" min=\"0\" max=\"255\" onchange=\"updateColor()\">";
  page += "</div>";
  page += "<div class=\"col\">";
  page += "<input type=\"range\" class=\"form-control-range\" id=\"blueSlider\" min=\"0\" max=\"255\" onchange=\"updateColor()\">";
  page += "</div>";
  page += "<div class=\"col\">";
  page += "<input type=\"color\" id=\"colorPicker\" value=\"#000000\" onchange=\"updateSliders()\">";
  page += "</div>";
  page += "</div>";
  page += "<button type=\"button\" class=\"btn btn-primary mt-3\" onclick=\"sendColor()\">Enviar Color</button>";
  page += "</div>";
  page += "<script>";
  page += "function updateColor() {";
  page += "var red = document.getElementById('redSlider').value;";
  page += "var green = document.getElementById('greenSlider').value;";
  page += "var blue = document.getElementById('blueSlider').value;";
  page += "document.getElementById('colorPicker').value = rgbToHex(red, green, blue);";
  page += "}";
  page += "function updateSliders() {";
  page += "var colorPicker = document.getElementById('colorPicker');";
  page += "var red = parseInt(colorPicker.value.substring(1, 3), 16);";
  page += "var green = parseInt(colorPicker.value.substring(3, 5), 16);";
  page += "var blue = parseInt(colorPicker.value.substring(5, 7), 16);";
  page += "document.getElementById('redSlider').value = red;";
  page += "document.getElementById('greenSlider').value = green;";
  page += "document.getElementById('blueSlider').value = blue;";
  page += "}";
  page += "function rgbToHex(red, green, blue) {";
  page += "var redHex = ('0' + red.toString(16)).slice(-2);";
  page += "var greenHex = ('0' + green.toString(16)).slice(-2);";
  page += "var blueHex = ('0' + blue.toString(16)).slice(-2);";
  page += "return '#' + redHex + greenHex + blueHex;";
  page += "}";
  page += "function sendColor() {";
  page += "var red = document.getElementById('redSlider').value;";
  page += "var green = document.getElementById('greenSlider').value;";
  page += "var blue = document.getElementById('blueSlider').value;";
  page += "fetch('/color?r=' + red + '&g=' + green + '&b=' + blue)";
  page += "}";
  page += "</script>";
  page += "</body>";  
  page += "</html>";

  server.send(200, "text/html", page);
}
